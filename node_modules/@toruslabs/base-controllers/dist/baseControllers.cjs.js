/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// ESM COMPAT FLAG
__webpack_require__.r(__webpack_exports__);

// EXPORTS
__webpack_require__.d(__webpack_exports__, {
  ACCOUNT_CATEGORY: () => (/* reexport */ ACCOUNT_CATEGORY),
  ACTIVITY_ACTION: () => (/* reexport */ ACTIVITY_ACTION),
  ACTIVITY_ACTION_ACCEPT_NFT_OFFER: () => (/* reexport */ ACTIVITY_ACTION_ACCEPT_NFT_OFFER),
  ACTIVITY_ACTION_ALL: () => (/* reexport */ ACTIVITY_ACTION_ALL),
  ACTIVITY_ACTION_BURN: () => (/* reexport */ ACTIVITY_ACTION_BURN),
  ACTIVITY_ACTION_CANCEL_NFT_OFFER: () => (/* reexport */ ACTIVITY_ACTION_CANCEL_NFT_OFFER),
  ACTIVITY_ACTION_CREATE_NFT_OFFER: () => (/* reexport */ ACTIVITY_ACTION_CREATE_NFT_OFFER),
  ACTIVITY_ACTION_CREATE_TRUSTLINE: () => (/* reexport */ ACTIVITY_ACTION_CREATE_TRUSTLINE),
  ACTIVITY_ACTION_RECEIVE: () => (/* reexport */ ACTIVITY_ACTION_RECEIVE),
  ACTIVITY_ACTION_REMOVE_TRUSTLINE: () => (/* reexport */ ACTIVITY_ACTION_REMOVE_TRUSTLINE),
  ACTIVITY_ACTION_SEND: () => (/* reexport */ ACTIVITY_ACTION_SEND),
  ACTIVITY_ACTION_TOPUP: () => (/* reexport */ ACTIVITY_ACTION_TOPUP),
  ACTIVITY_PERIOD_ALL: () => (/* reexport */ ACTIVITY_PERIOD_ALL),
  ACTIVITY_PERIOD_MONTH_ONE: () => (/* reexport */ ACTIVITY_PERIOD_MONTH_ONE),
  ACTIVITY_PERIOD_MONTH_SIX: () => (/* reexport */ ACTIVITY_PERIOD_MONTH_SIX),
  ACTIVITY_PERIOD_WEEK_ONE: () => (/* reexport */ ACTIVITY_PERIOD_WEEK_ONE),
  ACTIVITY_STATUS_CANCELLED: () => (/* reexport */ ACTIVITY_STATUS_CANCELLED),
  ACTIVITY_STATUS_CANCELLING: () => (/* reexport */ ACTIVITY_STATUS_CANCELLING),
  ACTIVITY_STATUS_PENDING: () => (/* reexport */ ACTIVITY_STATUS_PENDING),
  ACTIVITY_STATUS_SUCCESSFUL: () => (/* reexport */ ACTIVITY_STATUS_SUCCESSFUL),
  ACTIVITY_STATUS_UNSUCCESSFUL: () => (/* reexport */ ACTIVITY_STATUS_UNSUCCESSFUL),
  BROADCAST_CHANNELS: () => (/* reexport */ BROADCAST_CHANNELS),
  BROADCAST_CHANNELS_MSGS: () => (/* reexport */ BROADCAST_CHANNELS_MSGS),
  BUTTON_POSITION: () => (/* reexport */ BUTTON_POSITION),
  BaseBlockTracker: () => (/* reexport */ BaseBlockTracker),
  BaseController: () => (/* reexport */ src_BaseController),
  BaseCurrencyController: () => (/* reexport */ BaseCurrencyController),
  BaseEmbedController: () => (/* reexport */ BaseEmbedController),
  BaseKeyringController: () => (/* reexport */ BaseKeyringController),
  BasePreferencesController: () => (/* reexport */ BasePreferencesController),
  BaseTransactionStateManager: () => (/* reexport */ BaseTransactionStateManager),
  BroadcastChannelHandler: () => (/* reexport */ BroadcastChannelHandler),
  CHAIN_NAMESPACES: () => (/* reexport */ CHAIN_NAMESPACES),
  COMMUNICATION_JRPC_METHODS: () => (/* reexport */ COMMUNICATION_JRPC_METHODS),
  COMMUNICATION_NOTIFICATIONS: () => (/* reexport */ COMMUNICATION_NOTIFICATIONS),
  CONFIRMATION_STRATEGY: () => (/* reexport */ CONFIRMATION_STRATEGY),
  CommunicationWindowManager: () => (/* reexport */ Embed_CommunicationWindowManager),
  ControllerEvents: () => (/* reexport */ ControllerEvents),
  DEFAULT_PREFERENCES: () => (/* reexport */ DEFAULT_PREFERENCES),
  FEATURES_CONFIRM_WINDOW: () => (/* reexport */ FEATURES_CONFIRM_WINDOW),
  FEATURES_DEFAULT_POPUP_WINDOW: () => (/* reexport */ FEATURES_DEFAULT_POPUP_WINDOW),
  FEATURES_DEFAULT_WALLET_WINDOW: () => (/* reexport */ FEATURES_DEFAULT_WALLET_WINDOW),
  FEATURES_PROVIDER_CHANGE_WINDOW: () => (/* reexport */ FEATURES_PROVIDER_CHANGE_WINDOW),
  LOGIN_PROVIDER: () => (/* reexport */ LOGIN_PROVIDER),
  PAYMENT_PROVIDER: () => (/* reexport */ PAYMENT_PROVIDER),
  POPUP_LOADED: () => (/* reexport */ POPUP_LOADED),
  POPUP_RESULT: () => (/* reexport */ POPUP_RESULT),
  PROVIDER_JRPC_METHODS: () => (/* reexport */ PROVIDER_JRPC_METHODS),
  PROVIDER_NOTIFICATIONS: () => (/* reexport */ PROVIDER_NOTIFICATIONS),
  PopupHandler: () => (/* reexport */ Popup_PopupHandler),
  PopupStoreChannel: () => (/* reexport */ PopupStoreChannel),
  PopupWithBcHandler: () => (/* reexport */ Popup_PopupWithBcHandler),
  RedirectHandler: () => (/* reexport */ RedirectHandler),
  SETUP_COMPLETE: () => (/* reexport */ SETUP_COMPLETE),
  StreamWindow: () => (/* reexport */ Popup_StreamWindow),
  TRANSACTION_TYPES: () => (/* reexport */ TRANSACTION_TYPES),
  TX_EVENTS: () => (/* reexport */ TX_EVENTS),
  TransactionStatus: () => (/* reexport */ TransactionStatus),
  UserError: () => (/* reexport */ UserError),
  WSApiClient: () => (/* reexport */ src_WSApiClient),
  addressSlicer: () => (/* reexport */ addressSlicer),
  authServer: () => (/* reexport */ authServer),
  broadcastChannelOptions: () => (/* reexport */ broadcastChannelOptions),
  cloneDeep: () => (/* reexport */ cloneDeep),
  concatSig: () => (/* reexport */ concatSig),
  createChangeProviderMiddlewareMiddleware: () => (/* reexport */ createChangeProviderMiddlewareMiddleware),
  createCommunicationMiddleware: () => (/* reexport */ createCommunicationMiddleware),
  createEventEmitterProxy: () => (/* reexport */ createEventEmitterProxy),
  createFetchConfigFromReq: () => (/* reexport */ createFetchConfigFromReq),
  createFetchMiddleware: () => (/* reexport */ createFetchMiddleware),
  createGenericJRPCMiddleware: () => (/* reexport */ createGenericJRPCMiddleware),
  createInflightCacheMiddleware: () => (/* reexport */ createInflightCacheMiddleware),
  createLoggerMiddleware: () => (/* reexport */ createLoggerMiddleware),
  createOriginMiddleware: () => (/* reexport */ createOriginMiddleware),
  createRandomId: () => (/* reexport */ createRandomId),
  createSwappableProxy: () => (/* reexport */ createSwappableProxy),
  createTopupMiddleware: () => (/* reexport */ createTopupMiddleware),
  formatDate: () => (/* reexport */ formatDate),
  formatSmallNumbers: () => (/* reexport */ formatSmallNumbers),
  formatTime: () => (/* reexport */ formatTime),
  getCustomDeviceInfo: () => (/* reexport */ getCustomDeviceInfo),
  getHeaders: () => (/* reexport */ getHeaders),
  getPopupFeatures: () => (/* reexport */ getPopupFeatures),
  getTxStatusText: () => (/* reexport */ getTxStatusText),
  handleRedirectParameters: () => (/* reexport */ handleRedirectParameters),
  hashMessage: () => (/* reexport */ hashMessage),
  intToHex: () => (/* reexport */ intToHex),
  isUnauthorizedError: () => (/* reexport */ isUnauthorizedError),
  omitBy: () => (/* reexport */ omitBy),
  padWithZeroes: () => (/* reexport */ padWithZeroes),
  pickBy: () => (/* reexport */ pickBy),
  randomId: () => (/* reexport */ randomId),
  signChallenge: () => (/* reexport */ signChallenge),
  signMessage: () => (/* reexport */ signMessage),
  significantDigits: () => (/* reexport */ significantDigits),
  sleep: () => (/* reexport */ sleep),
  timeout: () => (/* reexport */ timeout),
  transactionMatchesNetwork: () => (/* reexport */ transactionMatchesNetwork),
  verifySignedChallenge: () => (/* reexport */ verifySignedChallenge)
});

;// CONCATENATED MODULE: external "@babel/runtime/helpers/objectSpread2"
const objectSpread2_namespaceObject = require("@babel/runtime/helpers/objectSpread2");
var objectSpread2_default = /*#__PURE__*/__webpack_require__.n(objectSpread2_namespaceObject);
;// CONCATENATED MODULE: external "@babel/runtime/helpers/defineProperty"
const defineProperty_namespaceObject = require("@babel/runtime/helpers/defineProperty");
var defineProperty_default = /*#__PURE__*/__webpack_require__.n(defineProperty_namespaceObject);
;// CONCATENATED MODULE: external "@toruslabs/openlogin-jrpc"
const openlogin_jrpc_namespaceObject = require("@toruslabs/openlogin-jrpc");
;// CONCATENATED MODULE: ./src/BaseController.ts



/**
 * Controller class that provides configuration, state management, and subscriptions
 */
class BaseController extends openlogin_jrpc_namespaceObject.SafeEventEmitter {
  /**
   * Creates a BaseController instance. Both initial state and initial
   * configuration options are merged with defaults upon initialization.
   *
   * @param config - Initial options used to configure this controller
   * @param state - Initial state to set on this controller
   */
  constructor({
    config = {},
    state = {}
  }) {
    super();
    // Use assign since generics can't be spread: https://git.io/vpRhY
    /**
     * Default options used to configure this controller
     */
    defineProperty_default()(this, "defaultConfig", {});
    /**
     * Default state set on this controller
     */
    defineProperty_default()(this, "defaultState", {});
    /**
     * Determines if listeners are notified of state changes
     */
    defineProperty_default()(this, "disabled", false);
    /**
     * Name of this controller used during composition
     */
    defineProperty_default()(this, "name", "BaseController");
    defineProperty_default()(this, "initialConfig", void 0);
    defineProperty_default()(this, "initialState", void 0);
    defineProperty_default()(this, "internalConfig", this.defaultConfig);
    defineProperty_default()(this, "internalState", this.defaultState);
    this.initialState = state;
    this.initialConfig = config;
  }

  /**
   * Retrieves current controller configuration options
   *
   * @returns - Current configuration
   */
  get config() {
    return this.internalConfig;
  }

  /**
   * Retrieves current controller state
   *
   * @returns - Current state
   */
  get state() {
    return this.internalState;
  }

  /**
   * Updates controller configuration
   *
   * @param config - New configuration options
   * @param overwrite - Overwrite config instead of merging
   * @param fullUpdate - Boolean that defines if the update is partial or not
   */
  configure(config, overwrite = false, fullUpdate = true) {
    if (fullUpdate) {
      this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);
      for (const key in this.internalConfig) {
        if (typeof this.internalConfig[key] !== "undefined") {
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this[key] = this.internalConfig[key];
        }
      }
    } else {
      for (const key in config) {
        /* istanbul ignore else */
        if (typeof this.internalConfig[key] !== "undefined") {
          this.internalConfig[key] = config[key];
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          this[key] = config[key];
        }
      }
    }
  }

  /**
   * Updates controller state
   *
   * @param state - New state
   * @param overwrite - Overwrite state instead of merging
   */
  update(state, overwrite = false) {
    this.internalState = overwrite ? objectSpread2_default()({}, state) : objectSpread2_default()(objectSpread2_default()({}, this.internalState), state);
    this.emit("store", this.internalState);
  }

  /**
   * Enables the controller. This sets each config option as a member
   * variable on this instance and triggers any defined setters. This
   * also sets initial state and triggers any listeners.
   *
   * @returns - This controller instance
   */
  initialize() {
    this.internalState = this.defaultState;
    this.internalConfig = this.defaultConfig;
    this.configure(this.initialConfig);
    this.update(this.initialState);
    return this;
  }
}
/* harmony default export */ const src_BaseController = (BaseController);
;// CONCATENATED MODULE: ./src/Block/BaseBlockTracker.ts


const sec = 1000;
const calculateSum = (accumulator, currentValue) => accumulator + currentValue;
const blockTrackerEvents = ["sync", "latest"];
class BaseBlockTracker extends src_BaseController {
  constructor({
    config = {},
    state = {}
  }) {
    super({
      config,
      state
    });

    // config
    defineProperty_default()(this, "name", "BaseBlockTracker");
    defineProperty_default()(this, "_blockResetTimeout", void 0);
    this.defaultState = {
      _currentBlock: {
        idempotencyKey: ""
      },
      _isRunning: false
    };
    this.defaultConfig = {
      blockResetDuration: 20 * sec
    };
    this.initialize();

    // bind functions for internal use
    this._onNewListener = this._onNewListener.bind(this);
    this._onRemoveListener = this._onRemoveListener.bind(this);
    this._resetCurrentBlock = this._resetCurrentBlock.bind(this);

    // listen for handler changes
    this._setupInternalEvents();
  }
  isRunning() {
    return this.state._isRunning;
  }
  getCurrentBlock() {
    return this.state._currentBlock;
  }
  async getLatestBlock() {
    // return if available
    if (this.state._currentBlock.idempotencyKey) {
      return this.state._currentBlock;
    }
    // wait for a new latest block
    const latestBlock = await new Promise(resolve => {
      this.once("latest", block => {
        if (block) {
          resolve(block);
        }
      });
    });
    // return newly set current block
    return latestBlock;
  }

  // dont allow module consumer to remove our internal event listeners
  removeAllListeners(eventName) {
    if (eventName) {
      super.removeAllListeners(eventName);
    } else {
      super.removeAllListeners();
    }
    // re-add internal events
    this._setupInternalEvents();
    // trigger stop check just in case
    this._onRemoveListener();
    return this;
  }

  /**
   * To be implemented in subclass.
   */
  _start() {
    // default behavior is noop
  }

  /**
   * To be implemented in subclass.
   */
  _end() {
    // default behavior is noop
  }
  _newPotentialLatest(newBlock) {
    const currentBlock = this.state._currentBlock;
    // only update if block number is higher
    if (currentBlock && newBlock.idempotencyKey === currentBlock.idempotencyKey) {
      return;
    }
    this._setCurrentBlock(newBlock);
  }
  _setupInternalEvents() {
    // first remove listeners for idempotency
    this.removeListener("newListener", this._onNewListener);
    this.removeListener("removeListener", this._onRemoveListener);
    // then add them
    this.on("removeListener", this._onRemoveListener);
    this.on("newListener", this._onNewListener);
  }
  _onNewListener() {
   